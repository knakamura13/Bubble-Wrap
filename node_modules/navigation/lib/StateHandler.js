"use strict";
var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
exports.__esModule = true;
var Crumb_1 = require("./config/Crumb");
var NavigationDataManager_1 = require("./NavigationDataManager");
var State_1 = require("./config/State");
var StateRouter_1 = require("./StateRouter");
var StateHandler = (function () {
    function StateHandler() {
        this.navigationDataManager = new NavigationDataManager_1["default"]();
        this.router = new StateRouter_1["default"]();
    }
    StateHandler.prototype.buildStates = function (states) {
        var builtStates = [];
        var stateKeys = {};
        for (var i = 0; i < states.length; i++) {
            var stateObject = states[i];
            var state = new State_1["default"]();
            for (var key in stateObject)
                state[key] = stateObject[key];
            if (!state.key)
                throw new Error('State key is mandatory');
            if (state.route == null)
                state.route = state.key;
            if (state.trackCrumbTrail) {
                state.trackCrumbTrail = true;
                state.crumbTrailKey = 'crumb';
                var trackCrumbTrail = stateObject.trackCrumbTrail;
                if (typeof trackCrumbTrail === 'string')
                    state.crumbTrailKey = trackCrumbTrail;
                state.defaultTypes[state.crumbTrailKey] = 'stringarray';
            }
            for (var key in state.defaults) {
                if (!state.defaultTypes[key])
                    state.defaultTypes[key] = this.navigationDataManager.getConverter(state.defaults[key]).name;
                var formattedData = this.navigationDataManager.formatURLObject(key, state.defaults[key], state);
                state.formattedDefaults[key] = formattedData.val;
                if (formattedData.arrayVal)
                    state.formattedArrayDefaults[key] = formattedData.arrayVal;
            }
            if (stateKeys[state.key])
                throw new Error('A State with key ' + state.key + ' already exists');
            stateKeys[state.key] = true;
            builtStates.push(state);
        }
        this.router.addRoutes(builtStates);
        return builtStates;
    };
    StateHandler.prototype.getLink = function (state, navigationData, crumbs, nextCrumb) {
        var crumbTrail = [];
        if (crumbs) {
            crumbs = crumbs.slice();
            if (nextCrumb)
                crumbs.push(nextCrumb);
            crumbs = state.truncateCrumbTrail(state, __assign({}, state.defaults, navigationData), crumbs);
            for (var i = 0; i < crumbs.length; i++)
                crumbTrail.push(crumbs[i].crumblessUrl);
        }
        return this.getNavigationLink(state, navigationData, crumbTrail);
    };
    StateHandler.prototype.getNavigationLink = function (state, navigationData, crumbTrail) {
        var _a = this.navigationDataManager.formatData(state, navigationData, crumbTrail), data = _a.data, arrayData = _a.arrayData;
        var routeInfo = this.router.getRoute(state, data, arrayData);
        if (routeInfo.route == null)
            return null;
        var query = [];
        for (var key in data) {
            if (!routeInfo.data[key]) {
                var arr = arrayData[key];
                var encodedKey = state.urlEncode(state, null, key, true);
                if (!arr) {
                    query.push(encodedKey + '=' + state.urlEncode(state, key, data[key], true));
                }
                else {
                    for (var i = 0; i < arr.length; i++)
                        query.push(encodedKey + '=' + state.urlEncode(state, key, arr[i], true));
                }
            }
        }
        if (query.length > 0)
            routeInfo.route += '?' + query.join('&');
        return routeInfo.route;
    };
    StateHandler.prototype.parseLink = function (url, fromRoute, err) {
        if (err === void 0) { err = ''; }
        var queryIndex = url.indexOf('?');
        var path = queryIndex < 0 ? url : url.substring(0, queryIndex);
        var query = queryIndex >= 0 ? url.substring(queryIndex + 1) : null;
        var match = this.router.getData(path, fromRoute);
        if (!match)
            throw new Error('The Url ' + url + ' is invalid' + (err || '\nNo match found'));
        var state = match.state, data = match.data, separableData = match.separableData, route = match.route;
        try {
            var navigationData = this.getNavigationData(query, state, data || {}, separableData);
        }
        catch (e) {
            err += '\n' + e.message;
        }
        return navigationData || this.parseLink(url, route, err);
    };
    StateHandler.prototype.getNavigationData = function (query, state, data, separableData) {
        if (query) {
            var params = query.split('&');
            for (var i = 0; i < params.length; i++) {
                var param = params[i].split('=');
                var key = state.urlDecode(state, null, param[0], true);
                var val = state.urlDecode(state, key, param[1], true);
                separableData[key] = true;
                var arr = data[key];
                if (!arr) {
                    data[key] = val;
                }
                else {
                    if (typeof arr === 'string')
                        data[key] = arr = [arr];
                    arr.push(val);
                }
            }
        }
        data = this.navigationDataManager.parseData(data, state, separableData);
        var crumbTrail = data[state.crumbTrailKey];
        delete data[state.crumbTrailKey];
        var valid = state.validate(data);
        if (valid) {
            data[state.crumbTrailKey] = this.getCrumbs(crumbTrail);
            return { state: state, data: data };
        }
        return null;
    };
    StateHandler.prototype.getCrumbs = function (crumbTrail) {
        var crumbs = [];
        var len = crumbTrail ? crumbTrail.length : 0;
        for (var i = 0; i < len; i++) {
            var crumblessUrl = crumbTrail[i];
            if (!crumblessUrl || crumblessUrl.substring(0, 1) !== '/')
                throw new Error(crumblessUrl + ' is not a valid crumb');
            var _a = this.parseLink(crumblessUrl), state = _a.state, data = _a.data;
            delete data[state.crumbTrailKey];
            var url = this.getNavigationLink(state, data, crumbTrail.slice(0, i));
            crumbs.push(new Crumb_1["default"](data, state, url, crumblessUrl, i + 1 === len));
        }
        return crumbs;
    };
    return StateHandler;
}());
exports["default"] = StateHandler;
