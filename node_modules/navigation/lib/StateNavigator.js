"use strict";
exports.__esModule = true;
var Crumb_1 = require("./config/Crumb");
var FluentNavigator_1 = require("./FluentNavigator");
var HashHistoryManager_1 = require("./history/HashHistoryManager");
var StateContext_1 = require("./StateContext");
var StateHandler_1 = require("./StateHandler");
var StateNavigator = (function () {
    function StateNavigator(states, historyManager) {
        this.NAVIGATE_HANDLER_ID = 'navigateHandlerId';
        this.navigateHandlerId = 1;
        this.navigateHandlers = {};
        this.stateHandler = new StateHandler_1["default"]();
        this.stateContext = new StateContext_1["default"]();
        this.states = {};
        if (states)
            this.configure(states, historyManager);
    }
    StateNavigator.prototype.configure = function (stateInfos, historyManager) {
        var _this = this;
        if (this.historyManager)
            this.historyManager.stop();
        this.historyManager = historyManager ? historyManager : new HashHistoryManager_1["default"]();
        this.historyManager.init(function () {
            if (_this.stateContext.url === _this.historyManager.getCurrentUrl())
                return;
            _this.navigateLink(_this.historyManager.getCurrentUrl(), undefined, true);
        });
        var states = this.stateHandler.buildStates(stateInfos);
        this.states = {};
        for (var i = 0; i < states.length; i++)
            this.states[states[i].key] = states[i];
    };
    StateNavigator.prototype.setStateContext = function (state, data, url) {
        this.stateContext.oldState = this.stateContext.state;
        this.stateContext.oldData = this.stateContext.data;
        this.stateContext.oldUrl = this.stateContext.url;
        this.stateContext.state = state;
        this.stateContext.url = url;
        this.stateContext.title = state.title;
        this.stateContext.crumbs = data[state.crumbTrailKey];
        delete data[state.crumbTrailKey];
        this.stateContext.data = data;
        this.stateContext.nextCrumb = new Crumb_1["default"](data, state, url, this.stateHandler.getLink(state, data), false);
        this.stateContext.previousState = null;
        this.stateContext.previousData = {};
        this.stateContext.previousUrl = null;
        if (this.stateContext.crumbs.length > 0) {
            var previousStateCrumb = this.stateContext.crumbs.slice(-1)[0];
            this.stateContext.previousState = previousStateCrumb.state;
            this.stateContext.previousData = previousStateCrumb.data;
            this.stateContext.previousUrl = previousStateCrumb.url;
        }
    };
    StateNavigator.prototype.onNavigate = function (handler) {
        if (!handler[this.NAVIGATE_HANDLER_ID]) {
            var id = this.NAVIGATE_HANDLER_ID + this.navigateHandlerId++;
            handler[this.NAVIGATE_HANDLER_ID] = id;
            this.navigateHandlers[id] = handler;
        }
        else {
            throw new Error('Cannot add the same handler more than once');
        }
    };
    StateNavigator.prototype.offNavigate = function (handler) {
        delete this.navigateHandlers[handler[this.NAVIGATE_HANDLER_ID]];
        delete handler[this.NAVIGATE_HANDLER_ID];
    };
    StateNavigator.prototype.navigate = function (stateKey, navigationData, historyAction) {
        var url = this.getNavigationLink(stateKey, navigationData);
        if (url == null)
            throw new Error('Invalid route data, a mandatory route parameter has not been supplied a value');
        this.navigateLink(url, historyAction);
    };
    StateNavigator.prototype.getNavigationLink = function (stateKey, navigationData) {
        if (!this.states[stateKey])
            throw new Error(stateKey + ' is not a valid State');
        var _a = this.stateContext, crumbs = _a.crumbs, nextCrumb = _a.nextCrumb;
        return this.stateHandler.getLink(this.states[stateKey], navigationData, crumbs, nextCrumb);
    };
    StateNavigator.prototype.canNavigateBack = function (distance) {
        return distance <= this.stateContext.crumbs.length && distance > 0;
    };
    StateNavigator.prototype.navigateBack = function (distance, historyAction) {
        var url = this.getNavigationBackLink(distance);
        this.navigateLink(url, historyAction);
    };
    StateNavigator.prototype.getNavigationBackLink = function (distance) {
        if (!this.canNavigateBack(distance))
            throw new Error('The distance parameter must be greater than zero and less than or equal to the number of Crumbs (' + this.stateContext.crumbs.length + ')');
        return this.stateContext.crumbs[this.stateContext.crumbs.length - distance].url;
    };
    StateNavigator.prototype.refresh = function (navigationData, historyAction) {
        var url = this.getRefreshLink(navigationData);
        if (url == null)
            throw new Error('Invalid route data, a mandatory route parameter has not been supplied a value');
        this.navigateLink(url, historyAction);
    };
    StateNavigator.prototype.getRefreshLink = function (navigationData) {
        var _a = this.stateContext, crumbs = _a.crumbs, nextCrumb = _a.nextCrumb;
        return this.stateHandler.getLink(this.stateContext.state, navigationData, crumbs, nextCrumb);
    };
    StateNavigator.prototype.navigateLink = function (url, historyAction, history) {
        var _this = this;
        if (historyAction === void 0) { historyAction = 'add'; }
        if (history === void 0) { history = false; }
        var oldUrl = this.stateContext.url;
        var _a = this.stateHandler.parseLink(url), state = _a.state, data = _a.data;
        var navigateContinuation = this.getNavigateContinuation(oldUrl, state, data, url, historyAction);
        var unloadContinuation = function () {
            if (oldUrl === _this.stateContext.url)
                state.navigating(data, url, navigateContinuation, history);
        };
        if (this.stateContext.state)
            this.stateContext.state.unloading(state, data, url, unloadContinuation, history);
        else
            state.navigating(data, url, navigateContinuation, history);
    };
    StateNavigator.prototype.getNavigateContinuation = function (oldUrl, state, data, url, historyAction) {
        var _this = this;
        return function (asyncData) {
            if (oldUrl === _this.stateContext.url) {
                _this.setStateContext(state, data, url);
                if (_this.stateContext.oldState && _this.stateContext.oldState !== state)
                    _this.stateContext.oldState.dispose();
                state.navigated(_this.stateContext.data, asyncData);
                for (var id in _this.navigateHandlers) {
                    if (url === _this.stateContext.url)
                        _this.navigateHandlers[id](_this.stateContext.oldState, state, _this.stateContext.data, asyncData);
                }
                if (url === _this.stateContext.url) {
                    if (historyAction !== 'none')
                        _this.historyManager.addHistory(url, historyAction === 'replace');
                    if (_this.stateContext.title && (typeof document !== 'undefined'))
                        document.title = _this.stateContext.title;
                }
            }
        };
    };
    StateNavigator.prototype.parseLink = function (url) {
        var _a = this.stateHandler.parseLink(url), state = _a.state, data = _a.data;
        delete data[state.crumbTrailKey];
        return { state: state, data: data };
    };
    StateNavigator.prototype.fluent = function (withContext) {
        if (withContext === void 0) { withContext = false; }
        var stateContext = !withContext ? undefined : this.stateContext;
        return FluentNavigator_1.createFluentNavigator(this.states, this.stateHandler, stateContext);
    };
    StateNavigator.prototype.start = function (url) {
        this.navigateLink(url != null ? url : this.historyManager.getCurrentUrl());
    };
    ;
    return StateNavigator;
}());
exports["default"] = StateNavigator;
