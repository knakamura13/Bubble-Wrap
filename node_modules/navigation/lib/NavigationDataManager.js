"use strict";
exports.__esModule = true;
var ConverterFactory_1 = require("./converter/ConverterFactory");
var NavigationDataManager = (function () {
    function NavigationDataManager() {
        this.converterFactory = new ConverterFactory_1["default"]();
    }
    NavigationDataManager.prototype.formatData = function (state, navigationData, crumbTrail) {
        var data = {};
        var arrayData = {};
        for (var key in navigationData) {
            var val = navigationData[key];
            if (val != null && val.toString())
                this.formatDataItem(state, key, val, data, arrayData);
        }
        if (state.trackCrumbTrail && crumbTrail.length > 0)
            this.formatDataItem(state, state.crumbTrailKey, crumbTrail, data, arrayData);
        return { data: data, arrayData: arrayData };
    };
    NavigationDataManager.prototype.formatDataItem = function (state, key, val, data, arrayData) {
        var formattedData = this.formatURLObject(key, val, state);
        val = formattedData.val;
        if (val !== state.formattedDefaults[key]) {
            data[key] = val;
            arrayData[key] = formattedData.arrayVal;
        }
    };
    NavigationDataManager.decodeUrlValue = function (urlValue) {
        return urlValue.replace(/0_/g, '_');
    };
    NavigationDataManager.encodeUrlValue = function (urlValue) {
        return urlValue.replace(/_/g, '0_');
    };
    NavigationDataManager.prototype.formatURLObject = function (key, urlObject, state, encode) {
        if (encode === void 0) { encode = false; }
        encode = encode || state.trackTypes;
        var defaultType = state.defaultTypes[key] ? state.defaultTypes[key] : 'string';
        var converter = this.getConverter(urlObject);
        var convertedValue = converter.convertTo(urlObject);
        var formattedValue = convertedValue.val;
        var formattedArray = convertedValue.arrayVal;
        if (encode) {
            formattedValue = NavigationDataManager.encodeUrlValue(formattedValue);
            if (formattedArray)
                formattedArray[0] = NavigationDataManager.encodeUrlValue(formattedArray[0]);
        }
        if (state.trackTypes && converter.name !== defaultType) {
            formattedValue += NavigationDataManager.SEPARATOR + converter.key;
            if (formattedArray)
                formattedArray[0] = formattedArray[0] + NavigationDataManager.SEPARATOR + converter.key;
        }
        return { val: formattedValue, arrayVal: formattedArray };
    };
    NavigationDataManager.prototype.parseData = function (data, state, separableData) {
        var newData = {};
        for (var key in data) {
            if (!NavigationDataManager.isDefault(key, data, state, !!separableData[key]))
                newData[key] = this.parseURLString(key, data[key], state, false, !!separableData[key]);
        }
        for (var key in state.defaults) {
            if (newData[key] == null || !newData[key].toString())
                newData[key] = state.defaults[key];
        }
        return newData;
    };
    NavigationDataManager.isDefault = function (key, data, state, separable) {
        var val = data[key];
        var arrayDefaultVal = state.formattedArrayDefaults[key];
        if (!separable || !arrayDefaultVal) {
            return val === state.formattedDefaults[key];
        }
        else {
            if (typeof val === 'string')
                val = [val];
            if (val.length !== arrayDefaultVal.length)
                return false;
            for (var i = 0; i < val.length; i++) {
                if (val[i] !== arrayDefaultVal[i])
                    return false;
            }
            return true;
        }
    };
    NavigationDataManager.prototype.parseURLString = function (key, val, state, decode, separable) {
        if (decode === void 0) { decode = false; }
        if (separable === void 0) { separable = false; }
        decode = decode || state.trackTypes;
        var defaultType = state.defaultTypes[key] || 'string';
        var urlValue = typeof val === 'string' ? val : val[0];
        var converterKey = this.converterFactory.getConverterFromName(defaultType).key;
        if (state.trackTypes && urlValue.indexOf(NavigationDataManager.SEPARATOR) > -1) {
            var arr = urlValue.split(NavigationDataManager.SEPARATOR);
            urlValue = arr[0];
            converterKey = arr[1];
        }
        if (decode)
            urlValue = NavigationDataManager.decodeUrlValue(urlValue);
        if (typeof val === 'string')
            val = urlValue;
        else
            val[0] = urlValue;
        return this.converterFactory.getConverterFromKey(converterKey).convertFrom(val, separable);
    };
    NavigationDataManager.prototype.getConverter = function (obj) {
        var fullName = NavigationDataManager.getTypeName(obj);
        if (fullName === 'array') {
            var arr = obj;
            var subName = 'string';
            for (var i = 0; i < arr.length; i++) {
                if (arr[i] != null && arr[i].toString()) {
                    subName = NavigationDataManager.getTypeName(arr[i]);
                    break;
                }
            }
            fullName = subName + fullName;
        }
        return this.converterFactory.getConverterFromName(fullName);
    };
    NavigationDataManager.getTypeName = function (obj) {
        var typeName = typeof obj;
        if (typeName === 'object') {
            typeName = Object.prototype.toString.call(obj);
            typeName = typeName.substring(8, typeName.length - 1).toLowerCase();
        }
        return typeName;
    };
    NavigationDataManager.SEPARATOR = '1_';
    return NavigationDataManager;
}());
exports["default"] = NavigationDataManager;
