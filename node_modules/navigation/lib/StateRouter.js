"use strict";
exports.__esModule = true;
var Router_1 = require("./routing/Router");
var StateRouter = (function () {
    function StateRouter() {
    }
    StateRouter.prototype.getData = function (path, fromRoute) {
        var match = this.router.match(path, fromRoute, StateRouter.urlDecode);
        if (!match)
            return null;
        var separableData = {};
        var route = match.route, _a = match.route, splat = _a._splat, state = _a._state, params = _a.params, data = match.data;
        if (splat) {
            for (var i = 0; i < params.length; i++) {
                var param = params[i];
                if (param.splat)
                    separableData[param.name] = true;
            }
        }
        return { state: state, data: data, separableData: separableData, route: route };
    };
    StateRouter.prototype.getRoute = function (state, data, arrayData) {
        if (arrayData === void 0) { arrayData = {}; }
        var routeInfo = state['_routeInfo'];
        var paramsKey = '';
        for (var key in routeInfo.params) {
            if (data[key])
                paramsKey += routeInfo.params[key] + ',';
        }
        paramsKey = paramsKey.slice(0, -1);
        var routeMatch = routeInfo.matches[paramsKey];
        var routePath = null;
        if (routeMatch) {
            var combinedData = StateRouter.getCombinedData(routeMatch.route, data, arrayData);
            routePath = routeMatch.route.build(combinedData, StateRouter.urlEncode);
        }
        else {
            var bestMatch = StateRouter.findBestMatch(routeInfo.routes, data, arrayData);
            if (bestMatch) {
                routePath = bestMatch.routePath;
                routeMatch = { route: bestMatch.route, data: bestMatch.data };
                routeInfo.matches[paramsKey] = routeMatch;
            }
        }
        return { route: routePath, data: routeMatch ? routeMatch.data : {} };
    };
    StateRouter.findBestMatch = function (routes, data, arrayData) {
        var bestMatch;
        var bestMatchCount = -1;
        var bestMatchParamCount = -1;
        for (var i = 0; i < routes.length; i++) {
            var route = routes[i];
            var combinedData = StateRouter.getCombinedData(route, data, arrayData);
            var routePath = route.build(combinedData, StateRouter.urlEncode);
            if (routePath) {
                var count = 0;
                var routeData = {};
                for (var j = 0; j < route.params.length; j++) {
                    if (combinedData[route.params[j].name]) {
                        routeData[route.params[j].name] = {};
                        count++;
                    }
                }
                if (count > bestMatchCount || (count === bestMatchCount && route.params.length < bestMatchParamCount)) {
                    bestMatch = { route: route, data: routeData, routePath: routePath };
                    bestMatchCount = count;
                    bestMatchParamCount = route.params.length;
                }
            }
        }
        return bestMatch;
    };
    StateRouter.getCombinedData = function (route, data, arrayData) {
        if (!route['_splat'])
            return data;
        var combinedData = {};
        for (var key in data)
            combinedData[key] = data[key];
        for (var i = 0; i < route.params.length; i++) {
            var param = route.params[i];
            var arr = arrayData[param.name];
            if (param.splat && arr)
                combinedData[param.name] = arr;
        }
        return combinedData;
    };
    StateRouter.urlEncode = function (route, name, val) {
        var state = route['_state'];
        return state.urlEncode(state, name, val, false);
    };
    StateRouter.urlDecode = function (route, name, val) {
        var state = route['_state'];
        return state.urlDecode(state, name, val, false);
    };
    StateRouter.prototype.addRoutes = function (states) {
        this.router = new Router_1["default"]();
        for (var i = 0; i < states.length; i++) {
            this.addStateRoutes(states[i]);
        }
    };
    StateRouter.prototype.addStateRoutes = function (state) {
        var routeInfo = { routes: [], params: {}, matches: {} };
        var count = 0;
        var routes = StateRouter.getRoutes(state);
        for (var i = 0; i < routes.length; i++) {
            var route = this.router.addRoute(routes[i], state.formattedDefaults);
            var splat = false;
            for (var j = 0; j < route.params.length; j++) {
                var param = route.params[j];
                if (!routeInfo.params[param.name]) {
                    routeInfo.params[param.name] = count;
                    count++;
                }
                splat = splat || param.splat;
            }
            routeInfo.routes.push(route);
            route['_state'] = state;
            route['_splat'] = splat;
            route.defaults = StateRouter.getCombinedData(route, state.formattedDefaults, state.formattedArrayDefaults);
        }
        state['_routeInfo'] = routeInfo;
    };
    StateRouter.getRoutes = function (state) {
        var routes = [];
        var route = state.route;
        if (typeof route === 'string') {
            routes = routes.concat(StateRouter.expandRoute(route));
        }
        else {
            for (var i = 0; i < route.length; i++) {
                routes = routes.concat(StateRouter.expandRoute(route[i]));
            }
        }
        return routes;
    };
    StateRouter.expandRoute = function (route) {
        var routes = [];
        var subRoutes = route.split('+');
        var expandedRoute = '';
        for (var i = 0; i < subRoutes.length; i++) {
            expandedRoute += subRoutes[i];
            routes.push(expandedRoute);
        }
        return routes;
    };
    return StateRouter;
}());
exports["default"] = StateRouter;
