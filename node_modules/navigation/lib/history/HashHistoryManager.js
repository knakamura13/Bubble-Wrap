"use strict";
exports.__esModule = true;
var HashHistoryManager = (function () {
    function HashHistoryManager(replaceQueryIdentifier) {
        if (replaceQueryIdentifier === void 0) { replaceQueryIdentifier = false; }
        this.replaceQueryIdentifier = false;
        this.disabled = (typeof window === 'undefined') || !('onhashchange' in window);
        this.replaceQueryIdentifier = replaceQueryIdentifier;
    }
    HashHistoryManager.prototype.init = function (navigateHistory) {
        this.navigateHistory = navigateHistory;
        if (!this.disabled) {
            if (window.addEventListener)
                window.addEventListener('hashchange', this.navigateHistory);
            else
                window['attachEvent']('onhashchange', this.navigateHistory);
        }
    };
    HashHistoryManager.prototype.addHistory = function (url, replace) {
        var href = this.getHref(url);
        if (!this.disabled && location.hash !== href) {
            if (!replace)
                location.hash = href;
            else
                location.replace(href);
        }
    };
    HashHistoryManager.prototype.getCurrentUrl = function () {
        return this.getUrl(location);
    };
    HashHistoryManager.prototype.getHref = function (url) {
        if (url == null)
            throw new Error('The Url is invalid');
        return '#' + this.encode(url);
    };
    HashHistoryManager.prototype.getUrl = function (hrefElement) {
        return this.decode(hrefElement.hash.substring(1));
    };
    HashHistoryManager.prototype.stop = function () {
        if (!this.disabled) {
            if (window.removeEventListener)
                window.removeEventListener('hashchange', this.navigateHistory);
            else
                window['detachEvent']('onhashchange', this.navigateHistory);
        }
    };
    HashHistoryManager.prototype.encode = function (url) {
        if (!this.replaceQueryIdentifier)
            return url;
        return url.replace('?', '#');
    };
    HashHistoryManager.prototype.decode = function (hash) {
        if (!this.replaceQueryIdentifier)
            return hash;
        return hash.replace('#', '?');
    };
    return HashHistoryManager;
}());
exports["default"] = HashHistoryManager;
