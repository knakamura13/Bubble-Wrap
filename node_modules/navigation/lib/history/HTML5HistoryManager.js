"use strict";
exports.__esModule = true;
var HTML5HistoryManager = (function () {
    function HTML5HistoryManager(applicationPath) {
        if (applicationPath === void 0) { applicationPath = ''; }
        this.applicationPath = '';
        this.disabled = (typeof window === 'undefined') || !(window.history && window.history.pushState);
        this.applicationPath = HTML5HistoryManager.prependSlash(applicationPath);
    }
    HTML5HistoryManager.prototype.init = function (navigateHistory) {
        this.navigateHistory = navigateHistory;
        if (!this.disabled)
            window.addEventListener('popstate', this.navigateHistory);
    };
    HTML5HistoryManager.prototype.addHistory = function (url, replace) {
        var href = this.getHref(url);
        if (!this.disabled && location.pathname + location.search !== href) {
            if (!replace)
                window.history.pushState(null, null, href);
            else
                window.history.replaceState(null, null, href);
        }
    };
    HTML5HistoryManager.prototype.getCurrentUrl = function () {
        return this.getUrl(location);
    };
    HTML5HistoryManager.prototype.getHref = function (url) {
        if (url == null)
            throw new Error('The Url is invalid');
        return this.applicationPath + HTML5HistoryManager.prependSlash(url);
    };
    HTML5HistoryManager.prototype.getUrl = function (hrefElement) {
        return hrefElement.pathname.substring(this.applicationPath.length) + hrefElement.search;
    };
    HTML5HistoryManager.prototype.stop = function () {
        if (!this.disabled)
            window.removeEventListener('popstate', this.navigateHistory);
    };
    HTML5HistoryManager.prependSlash = function (url) {
        return (url && url.substring(0, 1) !== '/') ? '/' + url : url;
    };
    return HTML5HistoryManager;
}());
exports["default"] = HTML5HistoryManager;
