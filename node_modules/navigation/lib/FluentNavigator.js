"use strict";
exports.__esModule = true;
var Crumb_1 = require("./config/Crumb");
var StateContext_1 = require("./StateContext");
function createFluentNavigator(states, stateHandler, stateContext) {
    if (stateContext === void 0) { stateContext = new StateContext_1["default"](); }
    function navigateLink(url) {
        var _a = stateHandler.parseLink(url), state = _a.state, data = _a.data;
        var fluentContext = new StateContext_1["default"]();
        fluentContext.state = state;
        fluentContext.url = url;
        fluentContext.crumbs = data[state.crumbTrailKey];
        delete data[state.crumbTrailKey];
        fluentContext.data = data;
        fluentContext.nextCrumb = new Crumb_1["default"](data, state, url, stateHandler.getLink(state, data), false);
        return createFluentNavigator(states, stateHandler, fluentContext);
    }
    return {
        url: stateContext.url,
        navigate: function (stateKey, navigationData) {
            if (!states[stateKey])
                throw new Error(stateKey + ' is not a valid State');
            if (typeof navigationData === 'function')
                navigationData = navigationData(stateContext.data);
            var url = stateHandler.getLink(states[stateKey], navigationData, stateContext.crumbs, stateContext.nextCrumb);
            if (url == null)
                throw new Error('Invalid route data, a mandatory route parameter has not been supplied a value');
            return navigateLink(url);
        },
        navigateBack: function (distance) {
            if (!(distance <= stateContext.crumbs.length && distance > 0))
                throw new Error('The distance parameter must be greater than zero and less than or equal to the number of Crumbs (' + stateContext.crumbs.length + ')');
            var url = stateContext.crumbs[stateContext.crumbs.length - distance].url;
            return navigateLink(url);
        },
        refresh: function (navigationData) {
            if (typeof navigationData === 'function')
                navigationData = navigationData(stateContext.data);
            var url = stateHandler.getLink(stateContext.state, navigationData, stateContext.crumbs, stateContext.nextCrumb);
            if (url == null)
                throw new Error('Invalid route data, a mandatory route parameter has not been supplied a value');
            return navigateLink(url);
        }
    };
}
exports.createFluentNavigator = createFluentNavigator;
